#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>

#define MAX_SIZE 100

struct Stack {
    char items[MAX_SIZE][100];
    int top;
};

// Function to create an empty stack
struct Stack* createStack() {
    struct Stack* stack = (struct Stack*)malloc(sizeof(struct Stack));
    stack->top = -1;
    return stack;
}

// Function to check if the stack is full
bool isFull(struct Stack* stack) {
    return stack->top == MAX_SIZE - 1;
}

// Function to check if the stack is empty
bool isEmpty(struct Stack* stack) {
    return stack->top == -1;
}

// Function to push a URL onto the stack
void push(struct Stack* stack, const char* url) {
    if (isFull(stack)) {
        printf("Stack is full. Cannot push more elements.\n");
    } else {
        stack->top++;
        strcpy(stack->items[stack->top], url);
    }
}

// Function to pop a URL from the stack
void pop(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty. Cannot pop.\n");
    } else {
        printf("Popped URL: %s\n", stack->items[stack->top]);
        stack->top--;
    }
}

// Function to display the URLs in the stack
void display(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty.\n");
    } else {
        printf("Browser History:\n");
        for (int i = stack->top; i >= 0; i--) {
            printf("%s\n", stack->items[i]);
        }
    }
}

int main() {
    struct Stack* history = createStack();

    push(history, "https://www.google.com");
    push(history, "https://www.openai.com");
    push(history, "https://www.github.com");

    display(history);

    pop(history);

    display(history);

    return 0;
}
