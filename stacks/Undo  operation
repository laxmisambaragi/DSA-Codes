#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 100

// Structure representing an edit action
typedef struct {
    int type;  // 0: Insertion, 1: Deletion
    int position;
    char text;
} EditAction;

// Stack structure
typedef struct {
    EditAction actions[MAX_SIZE];
    int top;
} Stack;

// Function to initialize the stack
void initialize(Stack* stack) {
    stack->top = -1;
}

// Function to check if the stack is empty
int isEmpty(Stack* stack) {
    return stack->top == -1;
}

// Function to check if the stack is full
int isFull(Stack* stack) {
    return stack->top == MAX_SIZE - 1;
}

// Function to push an action onto the stack
void push(Stack* stack, EditAction action) {
    if (isFull(stack)) {
        printf("Stack is full. Cannot push action.\n");
        return;
    }
    stack->actions[++stack->top] = action;
}

// Function to pop the top action from the stack
EditAction pop(Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty. Cannot pop action.\n");
        EditAction emptyAction = {0, 0, '\0'};
        return emptyAction;
    }
    return stack->actions[stack->top--];
}

// Function to simulate the undo operation
void undo(Stack* stack) {
    EditAction action = pop(stack);
    if (action.type == 0) {
        printf("Undoing insertion at position %d.\n", action.position);
        // Perform the necessary operation to revert the insertion
    } else if (action.type == 1) {
        printf("Undoing deletion at position %d.\n", action.position);
        // Perform the necessary operation to restore the deleted text
    }
}

int main() {
    Stack actionStack;
    initialize(&actionStack);

    // Perform some edits and push the corresponding actions onto the stack
    EditAction action1 = {0, 5, 'A'};  // Insert 'A' at position 5
    push(&actionStack, action1);

    EditAction action2 = {1, 8, '\0'}; // Delete character at position 8
    push(&actionStack, action2);

    // Simulate an undo operation
    undo(&actionStack); // This will undo the deletion

    // Simulate another undo operation
    undo(&actionStack); // This will undo the insertion

    return 0;
}
